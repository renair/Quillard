version: 0.2

phases:

  install:
    commands:

      # AWS Codebuild Go images use /go for the $GOPATH so let's symlink our
      # application source code into that directory structure.
      #- ln -s "${CODEBUILD_SRC_DIR}" "/go/src/quillard"
      - GOPATH="${CODEBUILD_SRC_DIR}"
      
      - cd "$GOPATH/src/quillard"
      
      - go get ./...

      # Install golint
      #- go get -u github.com/golang/lint/golint

      # Install Testify to use common assertions and mocks in tests
      #- go get -u github.com/stretchr/testify

  pre_build:
    commands:

      # Make sure we're in the project directory within our GOPATH
      #- cd "/go/src/quillard"
       
       - mkdir "/build"
       
      # Fetch all dependencies
      #- go get ./...

      # Ensure code passes all lint tests
      #- golint -set_exit_status

      # Check for common Go application problems with 'go tool vet'
      #- go tool vet .

      # Run all tests included with our application
      #- go test .

  build:
    commands:

      # Build our go application
      - go build

      # Copy static assets to S3, and package application with AWS CloudFormation/SAM
      #- aws s3 cp --recursive public/ s3://$WEBSITE_S3_BUCKET/public/ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      #- sed -i -e "s|assets/|$WEBSITE_S3_PREFIX/public/assets/|g" public/index.html
      #- aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
  post_build:
    commands:
      - cp -R "./web" "/build/"
      
      - cp "quillard" "/build/"
      
      - find /
artifacts:
  files:
    - '**/*'
  base-directory: '/build/'
